
-- processus : 14
-- min fanout : 1
-- max fanout : 5
-- channels   : 46


--generated  at 30 ao√ªt 2013 15:10:43
--generic synchronous network model
--Bernard Pottier. UBO

VAL [14][3]BYTE NetProcess IS [   "P1 ", -- id: 1
  "P2 ", -- id: 2
  "P3 ", -- id: 3
  "P4 ", -- id: 4
  "P5 ", -- id: 5
  "P6 ", -- id: 6
  "P7 ", -- id: 7
  "P8 ", -- id: 8
  "P9 ", -- id: 9
  "P10", -- id: 10
  "P11", -- id: 11
  "P12", -- id: 12
  "P13", -- id: 13
  "P14"]:

VAL [14][4]BYTE NetProcedure IS [   "Node", -- id: 1
  "Node", -- id: 2
  "Node", -- id: 3
  "Node", -- id: 4
  "Node", -- id: 5
  "Node", -- id: 6
  "Node", -- id: 7
  "Node", -- id: 8
  "Node", -- id: 9
  "Node", -- id: 10
  "Node", -- id: 11
  "Node", -- id: 12
  "Node", -- id: 13
  "Node"]:


#USE "course.lib"


VAL INT MaxFanOut IS 5:

VAL INT MaxNodes IS 14:

#INCLUDE "nodes-test-include.occ"

PROC mekong1(CHAN OF BYTE stdin, stdout, stderr)


   -- Channel declarations 
  CHAN OF diam.proto P1.P2,P1.P5,P1.P12,P1.P13,P1.P14:
  CHAN OF diam.proto P2.P1,P2.P5:
  CHAN OF diam.proto P3.P4:
  CHAN OF diam.proto P4.P3:
  CHAN OF diam.proto P5.P1,P5.P2,P5.P6,P5.P7,P5.P8:
  CHAN OF diam.proto P6.P5,P6.P7,P6.P8,P6.P9:
  CHAN OF diam.proto P7.P5,P7.P6,P7.P8,P7.P9:
  CHAN OF diam.proto P8.P5,P8.P6,P8.P7,P8.P9,P8.P10:
  CHAN OF diam.proto P9.P6,P9.P7,P9.P8,P9.P10,P9.P11:
  CHAN OF diam.proto P10.P8,P10.P9,P10.P11:
  CHAN OF diam.proto P11.P9,P11.P10:
  CHAN OF diam.proto P12.P1,P12.P13,P12.P14:
  CHAN OF diam.proto P13.P1,P13.P12,P13.P14:
  CHAN OF diam.proto P14.P1,P14.P12,P14.P13:

  -- Channel table declaration for nodes 
  P1.out IS [ P1.P2,P1.P5,P1.P12,P1.P13,P1.P14 ]:
  P1.in IS [ P2.P1,P5.P1,P12.P1,P13.P1,P14.P1 ]:
  P2.out IS [ P2.P1,P2.P5 ]:
  P2.in IS [ P1.P2,P5.P2 ]:
  P3.out IS [ P3.P4 ]:
  P3.in IS [ P4.P3 ]:
  P4.out IS [ P4.P3 ]:
  P4.in IS [ P3.P4 ]:
  P5.out IS [ P5.P1,P5.P2,P5.P6,P5.P7,P5.P8 ]:
  P5.in IS [ P1.P5,P2.P5,P6.P5,P7.P5,P8.P5 ]:
  P6.out IS [ P6.P5,P6.P7,P6.P8,P6.P9 ]:
  P6.in IS [ P5.P6,P7.P6,P8.P6,P9.P6 ]:
  P7.out IS [ P7.P5,P7.P6,P7.P8,P7.P9 ]:
  P7.in IS [ P5.P7,P6.P7,P8.P7,P9.P7 ]:
  P8.out IS [ P8.P5,P8.P6,P8.P7,P8.P9,P8.P10 ]:
  P8.in IS [ P5.P8,P6.P8,P7.P8,P9.P8,P10.P8 ]:
  P9.out IS [ P9.P6,P9.P7,P9.P8,P9.P10,P9.P11 ]:
  P9.in IS [ P6.P9,P7.P9,P8.P9,P10.P9,P11.P9 ]:
  P10.out IS [ P10.P8,P10.P9,P10.P11 ]:
  P10.in IS [ P8.P10,P9.P10,P11.P10 ]:
  P11.out IS [ P11.P9,P11.P10 ]:
  P11.in IS [ P9.P11,P10.P11 ]:
  P12.out IS [ P12.P1,P12.P13,P12.P14 ]:
  P12.in IS [ P1.P12,P13.P12,P14.P12 ]:
  P13.out IS [ P13.P1,P13.P12,P13.P14 ]:
  P13.in IS [ P1.P13,P12.P13,P14.P13 ]:
  P14.out IS [ P14.P1,P14.P12,P14.P13 ]:
  P14.in IS [ P1.P14,P12.P14,P13.P14 ]:


  -- Program Body 

  [MaxNodes]CHAN OF BYTE toMux:
  PAR
    Node(P1.in, P1.out,0, toMux [0])
    Node(P2.in, P2.out,1, toMux [1])
    Node(P3.in, P3.out,2, toMux [2])
    Node(P4.in, P4.out,3, toMux [3])
    Node(P5.in, P5.out,4, toMux [4])
    Node(P6.in, P6.out,5, toMux [5])
    Node(P7.in, P7.out,6, toMux [6])
    Node(P8.in, P8.out,7, toMux [7])
    Node(P9.in, P9.out,8, toMux [8])
    Node(P10.in, P10.out,9, toMux [9])
    Node(P11.in, P11.out,10, toMux [10])
    Node(P12.in, P12.out,11, toMux [11])
    Node(P13.in, P13.out,12, toMux [12])
    Node(P14.in, P14.out,13, toMux [13])
    Mux(toMux,stdout)
     -- End of program body 
:
